import powerbi from "powerbi-visuals-api";
import { ITooltipServiceWrapper, createTooltipServiceWrapper, TooltipEventArgs } from 'powerbi-visuals-utils-tooltiputils';

import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;
import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
import IVisual = powerbi.extensibility.visual.IVisual;
import IVisualHost = powerbi.extensibility.visual.IVisualHost;

import * as d3 from 'd3';

interface DataPoint {
    date: string;
    day: number;
    month: number;
    year: number;
    value: number;
    goal: number

}


export class Visual implements IVisual {
    private host: IVisualHost;
    private svg: d3.Selection<SVGSVGElement, any, HTMLElement, any>;
    private data: DataPoint[] = [];
    private tooltipServiceWrapper: ITooltipServiceWrapper;
    private daysOfWeekSvg: d3.Selection<SVGSVGElement, any, HTMLElement, any>; // New SVG element for days of the week
    private weekdays: string[] = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];




    private legendColors: { value: number; color: string }[] = [
        { value: 8, color: '#4D004B' },
        { value: 6, color: '#88419d' },
        { value: 2, color: '#bfd3e6' },
        { value: 0, color: '#eaf2f3' },
    ];


    constructor(options: VisualConstructorOptions) {
        this.host = options.host;
        this.svg = d3.select(options.element)
            .append('svg')
            .attr('class', 'heatmap-container');
        this.tooltipServiceWrapper = createTooltipServiceWrapper(this.host.tooltipService, options.element);

        // Set initial SVG dimensions based on screen size
        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;
        const cellSize = 10;
        const cellMargin = 2;
        const svgWidth = screenWidth > 12 * (cellSize + cellMargin) * 7 ? 12 * (cellSize + cellMargin) * 7 : screenWidth;
        const svgHeight = screenHeight > (cellSize + cellMargin) * 12 ? (cellSize + cellMargin) * 12 : screenHeight;

        // Create days of week SVG with appropriate height
        this.daysOfWeekSvg = d3.select(options.element)
            .append('svg')
            .attr('class', 'days-of-week-container')
            .attr('width', svgWidth)
            .attr('height', 20); // Adjust height as needed

        this.svg.attr('width', svgWidth)
            .attr('height', svgHeight)
            .style('stroke', '#000');
    }


    public update(options: VisualUpdateOptions) {
        // Clear previous data
        this.svg.selectAll('*').remove();

        // Get data from options
        const dataView = options.dataViews[0];

        if (!dataView || !dataView.categorical || !dataView.categorical.categories || !dataView.categorical.values) {
            return;
        }

        const categorical = dataView.categorical;
        const categoryValues = categorical.categories[0].values as string[];
        const measureValues = categorical.values[0].values as number[];
        const goalValues = categorical.categories[1].values as number[]

        this.data = categoryValues.map((date, index) => {
            const parsedDate = new Date(date);
            return {
                date: parsedDate.toLocaleDateString('en-US'),
                day: parsedDate.getUTCDate(),
                month: parsedDate.getUTCMonth() + 1,
                year: parsedDate.getUTCFullYear(),
                value: measureValues[index],
                goal: goalValues[index]
            };
        });

        this.createHeatmap(this.data);



    }



    private calculateCellColor(value: number, goal: number): string {
        let cellColor: string;

        if (value >= 0 && value <= 5000) {
            cellColor = this.legendColors.find(item => item.value === 0)?.color ?? '';
        } else if (value > 5000 && value <= 10000) {
            cellColor = this.legendColors.find(item => item.value === 2)?.color ?? '';
        } else if (value > 10000) {
            cellColor = this.legendColors.find(item => item.value === 6)?.color ?? '';
        } else {
            cellColor = this.legendColors.find(item => item.value === 8)?.color ?? '';
        }

        return cellColor;
    }



    private createHeatmap(data: DataPoint[]) {
        const cellSize: number = 10;
        const cellMargin: number = 2;
        const marginTop: number = 50; // Margin from the top
        const marginBottom: number = 5; // Margin from the bottom
        const marginLeft: number = 20; // Margin from the left
        const monthNames: string[] = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        const monthLabelsGroup = this.svg.append('g')
            .attr('class', 'month-labels-group');

        monthNames.forEach((monthName, index) => {
            const yPosition = marginTop + index * (4 * (cellSize + cellMargin)); // Adjust vertical spacing

            const label = monthLabelsGroup.append('text')
                .attr('x', 2 - 30) // Adjust x position for left alignment
                .attr('y', yPosition) // Adjust y position for reduced vertical spacing
                .attr('text-anchor', 'middle') // Correct text-anchor value for center alignment
                .attr('font-size', '10px') // Set font size for month labels
                .text(monthName); // Set text to the month name

            // Rotate the text vertically
            label.attr('transform', `rotate(-90, ${marginLeft - 10}, ${yPosition})`);
        });

        this.svg.append('rect')
            .attr('x', marginLeft)
            .attr('y', marginTop)
            .attr('width', (cellSize + cellMargin) * 7)
            .attr('height', (cellSize + cellMargin) * 53)
            .style('fill', 'none')
            .style('stroke', '#000') // Border color
            .style('stroke-width', 1);

        this.createColorLegend();
        this.createDaysOfWeek(data);
        this.createWeeksInYear(data);

        let xPosition: number = marginLeft;
        let yPosition: number = marginTop;

        let currentMonthIndex: number = 0;
        let currentDay: number = 1;
        let totalDays: number = 0;

        for (let rowIndex: number = 0; rowIndex < 53; rowIndex++) {
            for (let colIndex: number = 0; colIndex < 7; colIndex++) {
                const dayData: DataPoint | undefined = data.find((point) => point.month === currentMonthIndex + 1 && point.day === currentDay);

                let cellColor: string;
                let titleText: string;
                let dayText: string;
                if (totalDays >= 365) {
                    cellColor = '#fff';
                    titleText = '';
                    dayText = '';
                } else {
                    const currentDate = new Date(new Date().getFullYear(), currentMonthIndex, currentDay);
                    const dayOfMonth = currentDate.getDate();
                    titleText = dayOfMonth === 1 ? ` ${currentDate.getMonth() + 1}` : '';
                    dayText = dayOfMonth.toString(); // Get the day of the month as text

                    if (dayData) {
                        const value: number = Number(dayData.value);
                        const goal: number = Number(dayData.goal);
                        cellColor = this.calculateCellColor(value, goal);
                    } else {
                        cellColor = '#fff';
                    }
                }

                const rect = this.svg.append('rect')
                    .attr('class', 'calendar-day')
                    .attr('x', xPosition + colIndex * (cellSize + cellMargin))
                    .attr('y', yPosition + rowIndex * (cellSize + cellMargin))
                    .attr('width', cellSize)
                    .attr('height', cellSize)
                    .style('fill', cellColor)
                    .attr('title', titleText) // Updated title attribute
                    .style('stroke', 'none')
                    .style('box-shadow', 'none')
                    .style('opacity', 1);

                // Add text for day number in top right corner
                const text = this.svg.append('text')
                    .attr('x', xPosition + colIndex * (cellSize + cellMargin) + cellSize - 1) // Adjust x position for top right corner
                    .attr('y', yPosition + rowIndex * (cellSize + cellMargin) + 8) // Adjust y position for top right corner
                    .attr('text-anchor', 'end') // Align text to end for top right corner
                    .attr('font-size', '3px') // Set font size to 3px
                    .attr('font-style', 'normal') // Set font style to normal (not italic)
                    .text(dayText) // Display the day of the month text
                    .style('fill', '#000'); // Text color



                currentDay++;
                totalDays++;
                if (currentDay > new Date(new Date().getFullYear(), currentMonthIndex + 1, 0).getDate()) {
                    currentDay = 1;
                    currentMonthIndex = (currentMonthIndex + 1) % 12;
                }
            }
        }
        // Update the SVG height to accommodate the next row
        this.svg.attr('height', (cellSize + cellMargin) * 53 + marginTop + marginBottom);
    }





    private createDaysOfWeek(data: any) {
        const dayWidth = 10;
        const xPosition = 20; // Set the desired x position

        const weekdayStats: { [key: string]: { totalDiff: number } } = {
            'Mon': { totalDiff: 0 },
            'Tue': { totalDiff: 0 },
            'Wed': { totalDiff: 0 },
            'Thu': { totalDiff: 0 },
            'Fri': { totalDiff: 0 },
            'Sat': { totalDiff: 0 },
            'Sun': { totalDiff: 0 }
        };

        data.forEach((point: { year: number; month: number; day: number; value: number; goal: number }) => {
            const dayOfWeek = new Date(point.year, point.month - 1, point.day).getDay();
            const dayOfWeekName = this.weekdays[dayOfWeek];

            // Calculate the difference between goal and value for each weekday
            weekdayStats[dayOfWeekName].totalDiff += point.goal - point.value;
        });

        const barGroup = this.svg.append('g')
            .attr('class', 'days-of-week-bar-group')
            .attr('transform', `translate(${xPosition}, 15)`);

        const cornerRadius = 3;
        const barHeight = 30; // Fixed bar height

        // Find the highest totalDiff among all weekdays
        const maxTotalDiff = Math.max(...Object.values(weekdayStats).map((stats) => stats.totalDiff));

        this.weekdays.forEach((weekday, colIndex) => {
            const totalDiff = weekdayStats[weekday].totalDiff;

            // Calculate the fill color height based on the totalDiff
            const fillColorHeight = Math.abs((totalDiff / maxTotalDiff) * barHeight);

            // Calculate the y position for the fill color based on the bar height
            const fillColorY = 30 - fillColorHeight;

            // Calculate the fill color based on the totalDiff
            const fillColor = totalDiff >= 0 ? 'rgba(149, 168, 208, 1)' : 'rgba(245, 245, 245, 1)';

            const xBarPosition = colIndex * (dayWidth + 2);

            barGroup.append('rect')
                .attr('x', xBarPosition)
                .attr('y', 30 - barHeight) // Adjust the y position to start from the top
                .attr('width', dayWidth)
                .attr('height', barHeight)
                .attr('fill', 'whitesmoke') // White background for the bar
                .attr('stroke', 'none')
                .attr('rx', cornerRadius)
                .attr('ry', cornerRadius);

            barGroup.append('rect')
                .attr('x', xBarPosition)
                .attr('y', fillColorY)
                .attr('width', dayWidth)
                .attr('height', fillColorHeight)
                .attr('fill', fillColor)
                .attr('stroke', 'none')
                .attr('rx', cornerRadius)
                .attr('ry', cornerRadius);

            barGroup.append('text')
                .attr('x', xBarPosition + dayWidth / 2)
                .attr('y', -5)
                .attr('text-anchor', 'middle')
                .attr('alignment-baseline', 'middle')
                .attr('font-size', '8px')
                .text(this.weekdays[colIndex][0]);
        });
    }





    private createWeeksInYear(data: DataPoint[]) {
        const weeksInYear = 52; // Assuming a non-leap year
        const maxDifference = Math.max(...data.map((point) => Math.abs(point.value - point.goal))); // Calculate the maximum absolute difference between values and goals

        const weekWidth = 30;
        const weekHeight = 10;
        const xPosition = 110; // Adjust this position based on your heatmap width
        const yPosition = 40; // Adjust the y position as needed

        const barGroup = this.svg.append('g') // Use svg for weeks in a year
            .attr('class', 'weeks-bar-group')
            .attr('transform', `translate(${xPosition}, ${yPosition})`);

        const cornerRadius = 3;

        data.forEach((point) => {
            const weekNumber = this.getWeekNumber(new Date(point.year, point.month - 1, point.day));
            const difference = Math.abs(point.value - point.goal);
            const barWidth = (difference / maxDifference) * weekWidth; // Calculate width based on absolute difference

            // Determine fill color based on the difference
            const fillColor = difference >= 0 ? 'rgba(149, 168, 208, 1)' : 'rgba(245, 245, 245, 1)';

            // First, create the white background rect for the full width
            barGroup.append('rect')
                .attr('x', 0)
                .attr('y', weekNumber * (weekHeight + 2)) // Adjust the y position to start from the top
                .attr('width', weekWidth)
                .attr('height', weekHeight)
                .attr('fill', 'whitesmoke') // White background for the bar
                .attr('stroke', 'none')
                .attr('rx', cornerRadius)
                .attr('ry', cornerRadius);

            // Then, create the colored rect based on the calculated barWidth and fillColor
            barGroup.append('rect')
                .attr('x', 0)
                .attr('y', weekNumber * (weekHeight + 2)) // Adjust the y position to start from the top
                .attr('width', barWidth)
                .attr('height', weekHeight)
                .attr('fill', fillColor) // Fill color based on absolute difference
                .attr('stroke', 'none')
                .attr('rx', cornerRadius)
                .attr('ry', cornerRadius);
        });
    }

    // Helper function to get week number from date
    private getWeekNumber(date: Date): number {
        const startOfYear = new Date(date.getFullYear(), 0, 1);
        const diff = date.getTime() - startOfYear.getTime();
        const oneDay = 1000 * 60 * 60 * 24;
        const weekNumber = Math.ceil((diff / oneDay + startOfYear.getDay() + 1) / 7);
        return weekNumber;
    }







    private createColorLegend() {
        const legendWidth = 20; // Width of each legend item
        const legendHeight = 200; // Height of the legend bar
        const legendX = 150; // X position of the legend
        const legendY = 80; // Y position of the legend
        const cornerRadius = 6; // Rounded corner radius

        // Determine label spacing dynamically based on legend height and number of labels
        const legendLabels = [15000, 10000, 5000, 0]; // Reversed legend labels
        const labelSpacing = 55

        const legendGroup = this.svg.append('g')
            .attr('class', 'color-legend')
            .attr('transform', `translate(${legendX}, ${legendY})`);

        const legendScale = d3.scaleLinear<string>()
            .domain([0, this.legendColors.length - 1])
            .range(['url(#legendGradient)', 'url(#legendGradient)']); // You can change this range as needed

        const legendGradient = legendGroup.append('defs')
            .append('linearGradient')
            .attr('id', 'legendGradient')
            .attr('x1', '0%')
            .attr('y1', '0%')
            .attr('x2', '0%')
            .attr('y2', '100%');

        this.legendColors.forEach((item, index) => {
            legendGradient.append('stop')
                .attr('offset', `${(index * 100) / (this.legendColors.length - 1)}%`)
                .style('stop-color', item.color);
        });

        legendGroup.append('rect')
            .attr('x', 0)
            .attr('y', 0)
            .attr('width', legendWidth)
            .attr('height', legendHeight)
            .style('fill', legendScale(0)) // Use the legend scale to apply colors
            .style('stroke', 'none')
            .attr('rx', cornerRadius)
            .attr('ry', cornerRadius);

        // Add text labels for legend items
        legendLabels.forEach((label, index) => {
            const yPosition = index * labelSpacing;
            legendGroup.append('text')
                .attr('x', legendWidth + 10)
                .attr('y', yPosition + 30) // Adjusted y position for labels
                .attr('fill', '#000')
                .attr('font-size', '12px')
                .attr('alignment-baseline', 'middle')
                .text(`${label}`); // Use the legend label as the text
        });

        legendGroup.append('line')
            .attr('x1', 0)
            .attr('y1', 0)
            .attr('x2', 0)
            .attr('y2', legendHeight)
            .style('stroke', 'none')
            .style('stroke-width', 1);
    }























}
